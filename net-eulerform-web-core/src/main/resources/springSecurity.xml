<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                                 http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                                 http://www.springframework.org/schema/security
                                 http://www.springframework.org/schema/security/spring-security-4.0.xsd
                                 http://www.springframework.org/schema/security/oauth2
                                 http://www.springframework.org/schema/security/spring-security-oauth2.xsd">


    <global-method-security pre-post-annotations="enabled" order="0"
                            proxy-target-class="true">
    </global-method-security>

    <beans:bean id="sessionRegistry"
                class="org.springframework.security.core.session.SessionRegistryImpl" />

    <http security="none" pattern="/resources/**" />
    <http security="none" pattern="/getToken.html" />
    <http security="none" pattern="/favicon.ico" />

    <beans:beans profile="oauth-authorization-server">
        <beans:bean id="oauth2AuthorizationServerJwtAccessTokenConverter" class="org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter" >
            <beans:property name="signingKey" ref="jwtSigningKey"/>
            <beans:property name="verifierKey" ref="jwtVerifierKey"/>
            <!--<beans:property name="keyPair" ref="keyPair" />-->
        </beans:bean>

        <beans:bean id="oauth2AuthorizationServerTokenStore" class="org.springframework.security.oauth2.provider.token.store.JwtTokenStore" >
            <beans:constructor-arg ref="oauth2AuthorizationServerJwtAccessTokenConverter"/>
        </beans:bean>

        <beans:bean id="oauth2AuthorizationServerTokenServices"
                    class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
            <beans:property name="tokenStore" ref="oauth2AuthorizationServerTokenStore" />
            <beans:property name="clientDetailsService" ref="clientDetailsService" />
            <beans:property name="tokenEnhancer" ref="oauth2AuthorizationServerJwtAccessTokenConverter" />
            <beans:property name="supportRefreshToken" value="true" />
        </beans:bean>

        <beans:bean id="oauth2AuthorizationServerClientDetailsUserService"
                    class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
            <beans:constructor-arg ref="clientDetailsService"/>
            <beans:property name="passwordEncoder" ref="passwordEncoder"/>
        </beans:bean>

        <beans:bean id="oauth2AuthorizationServerAuthenticationEntryPoint"
                    class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint" />

        <authentication-manager id="oauth2AuthorizationServerAuthenticationManager">
            <authentication-provider user-service-ref="oauth2AuthorizationServerClientDetailsUserService">
                <password-encoder ref="passwordEncoder" />
            </authentication-provider>
        </authentication-manager>

        <beans:bean id="oauth2AuthorizationServerUserApprovalHandler"
                    class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler" >
            <beans:property name="tokenStore" ref="oauth2AuthorizationServerTokenStore" />
            <beans:property name="clientDetailsService" ref="clientDetailsService" />
            <beans:property name="requestFactory">
                <beans:bean class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
                    <beans:constructor-arg ref="clientDetailsService"/>
                </beans:bean>
            </beans:property>
        </beans:bean>

        <beans:bean id="oauth2AuthorizationServerAccessDeniedHandler"
                    class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

        <oauth2:authorization-server
                     token-services-ref="oauth2AuthorizationServerTokenServices"
                     client-details-service-ref="clientDetailsService"
                     user-approval-handler-ref="oauth2AuthorizationServerUserApprovalHandler"
                     user-approval-page="oauth/authorize"
                     error-page="oauth/error"
                     check-token-enabled="true" >
            <oauth2:authorization-code />
            <oauth2:implicit />
            <oauth2:refresh-token />
            <!--<oauth2:client-credentials />-->
            <oauth2:password />
        </oauth2:authorization-server>

        <!--<beans:bean id="oauth2AuthorizationServerClientCredentialsTokenEndpointFilter"
                    class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
            <beans:property name="authenticationManager" ref="oauth2AuthenticationManager"/>
        </beans:bean>-->

        <http pattern="/oauth/token" use-expressions="true" create-session="stateless"
              authentication-manager-ref="oauth2AuthorizationServerAuthenticationManager"
              entry-point-ref="oauth2AuthorizationServerAuthenticationEntryPoint">
            <intercept-url pattern="/oauth/token" access="isFullyAuthenticated()"/>
            <http-basic />
            <!--<custom-filter ref="oauth2AuthorizationServerClientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER"/>-->
            <access-denied-handler ref="oauth2AuthorizationServerAccessDeniedHandler"/>
            <csrf disabled="true"/>
        </http>
        
        <http pattern="/oauth/check_token" use-expressions="true" create-session="stateless"
              authentication-manager-ref="oauth2AuthorizationServerAuthenticationManager"
              entry-point-ref="oauth2AuthorizationServerAuthenticationEntryPoint">
            <intercept-url pattern="/oauth/check_token" access="isFullyAuthenticated()"/>
            <http-basic />
            <!--<custom-filter ref="oauth2AuthorizationServerClientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER"/>-->
            <access-denied-handler ref="oauth2AuthorizationServerAccessDeniedHandler"/>
            <csrf disabled="true"/>
        </http>
    </beans:beans>

    <beans:beans profile="oauth-resource-server">
        <beans:bean id="oauth2ResourceServerJwtAccessTokenConverter" class="org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter" >
            <beans:property name="verifierKey" ref="jwtVerifierKey"/>
        </beans:bean>

        <beans:bean id="oauth2ResourceServerTokenStore" class="org.springframework.security.oauth2.provider.token.store.JwtTokenStore" >
            <beans:constructor-arg ref="oauth2ResourceServerJwtAccessTokenConverter"/>
        </beans:bean>        

        <beans:bean id="oauth2ResourceServerTokenServices"
                    class="org.springframework.security.oauth2.provider.token.RemoteTokenServices">
            <beans:property name="checkTokenEndpointUrl" value="${oauth.remoteTokenServices.checkTokenEndpointUrl}" />
            <beans:property name="clientId" value="${oauth.remoteTokenServices.clientId}" />
            <beans:property name="clientSecret" value="${oauth.remoteTokenServices.clientSecret}" />
        </beans:bean>

        <beans:bean id="oauth2ResourceServerAccessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
            <beans:constructor-arg>
                <beans:list>
                    <beans:bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
                    <beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
                </beans:list>
            </beans:constructor-arg>
        </beans:bean>

        <beans:bean id="oauth2ResourceServerAuthenticationEntryPoint"
                    class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint" />

        <beans:bean id="oauth2ResourceServerAccessDeniedHandler"
                    class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

        <oauth2:resource-server id="oauth2ResourceServerFilter" resource-id="${oauth.resourceId}" token-services-ref="oauth2ResourceServerTokenServices" />
    </beans:beans>

    <beans:beans profile="rest-security-oauth">
        <beans:import resource="rest-security-oauth-config.xml"/>
    </beans:beans>

    <beans:beans profile="rest-security-basic">
        <beans:import resource="rest-security-basic-config.xml"/>
    </beans:beans>

    <beans:beans profile="rest-security-none">
        <http security="none" pattern="${rest.rooturl}/**" />
    </beans:beans>

    <beans:beans profile="web-security-none">
        <http security="none" pattern="/**" />
    </beans:beans>

    <beans:beans profile="web-security-local">
    
        <beans:import resource="web-security-local-config.xml"/>
        
        <authentication-manager>
            <authentication-provider user-service-ref="userDetailsService">
                <password-encoder ref="passwordEncoder" />
            </authentication-provider>
        </authentication-manager>
    </beans:beans>

    <beans:beans profile="web-security-ldap">
    
        <beans:import resource="web-security-ldap-config.xml"/>
        
        <authentication-manager>
            <authentication-provider ref="ldapAuthenticationProvider" />
        </authentication-manager>

        <beans:bean id="ldapAuthenticationProvider"
            class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">
            <beans:constructor-arg index="0"
                ref="ldapAuthenticator" />
            <beans:constructor-arg index="1"
                ref="ldapAuthoritiesPopulator" />
        </beans:bean>

        <beans:bean id="ldapAuthenticator"
            class="org.springframework.security.ldap.authentication.BindAuthenticator">
            <beans:constructor-arg ref="ldapContextSource" />
            <beans:property name="userSearch" ref="ldapUserSearch" />
        </beans:bean>

        <beans:bean id="ldapUserSearch"
            class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
            <beans:constructor-arg index="0"
                value="${ldap.searchBase}" />
            <beans:constructor-arg index="1"
                value="${ldap.searchFilter}" />
            <beans:constructor-arg index="2"
                ref="ldapContextSource" />
        </beans:bean>

        <beans:bean id="ldapContextSource"
            class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
            <beans:constructor-arg value="${ldap.url}" />
            <beans:property name="userDn" value="${ldap.userDN}" />
            <beans:property name="password" value="${ldap.password}" />
        </beans:bean>

        <beans:bean id="ldapAuthoritiesPopulator"
            class="org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator">
            <beans:constructor-arg ref="userDetailsService" />
        </beans:bean>
    </beans:beans>

    <beans:beans profile="web-security-cas">
    
        <beans:import resource="web-security-cas-config.xml"/>

        <authentication-manager alias="authenticationManager">
            <authentication-provider ref="casAuthenticationProvider" />
        </authentication-manager>

        <beans:bean id="serviceProperties"
            class="org.springframework.security.cas.ServiceProperties">
            <beans:property name="service"
                value="${cas.localSystemUrl}${cas.localSystemLoginUrl}" />
            <beans:property name="sendRenew" value="false" />
        </beans:bean>

        <beans:bean id="casEntryPoint"
            class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
            <beans:property name="loginUrl" value="${cas.loginUrl}" />
            <beans:property name="serviceProperties" ref="serviceProperties" />
        </beans:bean>

        <beans:bean id="casAuthenticationProvider"
            class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
            <beans:property name="userDetailsService" ref="userDetailsService" />
            <beans:property name="serviceProperties" ref="serviceProperties" />
            <beans:property name="ticketValidator">
                <beans:bean
                    class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
                    <beans:constructor-arg index="0"
                        value="${cas.url}" />
                </beans:bean>
            </beans:property>
            <beans:property name="key"
                value="an_id_for_this_auth_provider_only" />
        </beans:bean>

        <beans:bean id="casFilter"
            class="org.springframework.security.cas.web.CasAuthenticationFilter">
            <beans:property name="authenticationManager" ref="authenticationManager" />
            <beans:property name="filterProcessesUrl" value="${cas.localSystemLoginUrl}" />
        </beans:bean>

        <beans:bean id="singleLogoutFilter"
            class="org.jasig.cas.client.session.SingleSignOutFilter" />

        <beans:bean id="requestSingleLogoutFilter"
            class="org.springframework.security.web.authentication.logout.LogoutFilter">
            <beans:constructor-arg value="${cas.logoutUrl}" />
            <beans:constructor-arg>
                <beans:bean
                    class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
            </beans:constructor-arg>
            <beans:property name="filterProcessesUrl" value="/logout" />
        </beans:bean>
    </beans:beans>

</beans:beans>
